Imports System.Text.RegularExpressions

Sub Main()
    ' Tenta obter o documento ativo como DrawingDocument
    Dim drawingDoc As DrawingDocument = TryCast(ThisDoc.Document, DrawingDocument)
    If drawingDoc Is Nothing Then
        MsgBox("Erro: Documento de desenho não encontrado.")
        Exit Sub
    End If

    Dim sheetsList As New List(Of Sheet)
    Dim browserPane As BrowserPane = Nothing

    ' Obtém o painel do navegador
    Try
        browserPane = drawingDoc.BrowserPanes.Item("Modelo")
    Catch ex As Exception
        MsgBox("Erro ao obter o painel de navegador: " & ex.Message)
        Exit Sub
    End Try

    If browserPane Is Nothing Then
        MsgBox("Erro: Painel de navegador 'Modelo' não encontrado.")
        Exit Sub
    End If

    ' Adiciona todas as folhas à lista
    For Each folha As Sheet In drawingDoc.Sheets
        sheetsList.Add(folha)
    Next

    ' Ordena com base nos números dos nomes
    sheetsList.Sort(AddressOf Comparador)

    ' === ProgressBar nativa do Inventor ===
    Dim oProgressBar As Inventor.ProgressBar
    Dim oProgressSteps As Integer = sheetsList.Count
    Dim oProgressStep As Integer = 0
    Dim oProgressStaticText As String = "Reorganizando folha "
    oProgressBar = ThisApplication.CreateProgressBar(False, oProgressSteps, "Ordenando Folhas") ' False = barra grande

    ' Reorganiza as folhas no navegador
    For Each folha As Sheet In sheetsList
        Dim sheetNode As BrowserNode = Nothing
        Try
            sheetNode = browserPane.GetBrowserNodeFromObject(folha)
        Catch ex As Exception
            MsgBox("Erro ao obter o nó da folha: " & ex.Message)
            Continue For
        End Try

        If sheetNode Is Nothing Then
            MsgBox("Erro: Nó da folha não encontrado.")
            Continue For
        End If

        Dim bottomNode As BrowserNode = Nothing
        Try
            bottomNode = browserPane.TopNode.BrowserNodes.Item(browserPane.TopNode.BrowserNodes.Count)
        Catch ex As Exception
            MsgBox("Erro ao obter o último nó: " & ex.Message)
            Continue For
        End Try

        If bottomNode Is Nothing Then
            MsgBox("Erro: Último nó não encontrado.")
            Continue For
        End If

        Try
            browserPane.Reorder(bottomNode, False, sheetNode)
        Catch ex As Exception
            MsgBox("Erro ao reorganizar o nó: " & ex.Message)
            Continue For
        End Try

        ' Atualiza barra de progresso
        oProgressStep += 1
        oProgressBar.Message = oProgressStaticText & oProgressStep & " de " & oProgressSteps
        oProgressBar.UpdateProgress
    Next

    oProgressBar.Close
    MsgBox("Reorganização concluída com sucesso!")
End Sub

' Função de comparação personalizada para ordenação
Private Function Comparador(x As Sheet, y As Sheet) As Integer
    Dim regex As New Regex("\d+(\.\d+)*")
    Dim numeroX As List(Of Integer) = ExtrairNumero(x.Name, regex)
    Dim numeroY As List(Of Integer) = ExtrairNumero(y.Name, regex)

    For i As Integer = 0 To Math.Min(numeroX.Count, numeroY.Count) - 1
        Dim comparison As Integer = numeroX(i).CompareTo(numeroY(i))
        If comparison <> 0 Then
            Return comparison
        End If
    Next

    Return numeroX.Count.CompareTo(numeroY.Count)
End Function

' Extrai os números do nome da folha
Private Function ExtrairNumero(nome As String, regex As Regex) As List(Of Integer)
    nome = RemovePrefixo(nome)
    Dim match As Match = regex.Match(nome)
    Dim numeros As New List(Of Integer)

    If match.Success Then
        Dim partes() As String = match.Value.Split(".")
        For Each parte As String In partes
            numeros.Add(Convert.ToInt32(parte))
        Next
    End If

    If numeros.Count = 0 Then
        numeros.Add(0)
    End If

    Return numeros
End Function

' Remove prefixos do tipo "01-", "02-", etc.
Private Function RemovePrefixo(nome As String) As String
    Dim prefixoRegex As New Regex("^\d{2}-")
    Return prefixoRegex.Replace(nome, "")
End Function
